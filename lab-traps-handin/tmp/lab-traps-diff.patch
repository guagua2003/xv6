diff --git a/Makefile b/Makefile
index 7a7e380..bc4d47a 100644
--- a/Makefile
+++ b/Makefile
@@ -188,6 +188,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_alarmtest\
 
 
 
diff --git a/answers-traps.txt b/answers-traps.txt
new file mode 100644
index 0000000..3b97ffb
--- /dev/null
+++ b/answers-traps.txt
@@ -0,0 +1,39 @@
+1. 哪些寄存器包含函数参数？例如哪个寄存器持有13（在main函数中的printf中）？
+
+   **寄存器a0-a7包含函数参数；a2寄存器持有13**
+
+2. 在main汇编代码中哪里调用了函数f？哪里调用了函数g？
+
+   **在该函数中我们并没有调用f、g这两个函数，因为这两个被编译器优化为了内联函数，在编译期就计算得出了值。, 直接算出`f(8)+1=12` **
+
+3. 函数printf位于哪个地址？
+
+​		**0x30+1536=0x630**
+
+4. 在main中jalr到printf后，ra寄存器的值多少？
+
+   **pc+4=0x34+4=0x38**
+
+5. 运行以下代码
+
+   ```c
+   unsigned int i = 0x00646c72;
+   printf("H%x Wo%s", 57616, &i);
+   ```
+
+   输出是什么？
+   输出取决于RISC-V是小端序这一事实。如果RISC-V是big-endian，为了产生相同的输出，你会设置什么？是否需要更改为其他值？i57616
+
+   **输出：HE110 WORLD **
+
+   **如果risc-v是大端序，i需要设置为0x726c6400，57616不需要变（因为是按照二进制数字读取而非按照单个字符读取）**
+
+6. 在下面的代码中，之后将打印什么？（注意：答案不是一个特定的值。）为什么会发生这种情况？”y='
+
+   ```c
+   printf("x=%d y=%d", 3);
+   ```
+
+   **寄存器 a2 的值**
+
+   **因为按照 RISC-V 传参规则, 第二个不定参数应该被存于寄存器 a2, 因此在实际输出时也是将 a2 寄存器的值进行输出**
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..9dcf4b9 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct trapframe;
 
 // bio.c
 void            binit(void);
@@ -80,6 +81,7 @@ int             pipewrite(struct pipe*, uint64, int);
 void            printf(char*, ...);
 void            panic(char*) __attribute__((noreturn));
 void            printfinit(void);
+void            backtrace(void);
 
 // proc.c
 int             cpuid(void);
@@ -145,6 +147,7 @@ void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
 void            usertrapret(void);
+void            switchTrapframe(struct trapframe*, struct trapframe*);
 
 // uart.c
 void            uartinit(void);
diff --git a/kernel/printf.c b/kernel/printf.c
index e1347de..f4f61d7 100644
--- a/kernel/printf.c
+++ b/kernel/printf.c
@@ -121,6 +121,7 @@ panic(char *s)
   printf("panic: ");
   printf(s);
   printf("\n");
+  backtrace();
   panicked = 1; // freeze uart output from other CPUs
   for(;;)
     ;
@@ -132,3 +133,12 @@ printfinit(void)
   initlock(&pr.lock, "pr");
   pr.locking = 1;
 }
+
+void backtrace() {
+	printf("backtrace:\n");
+    uint64 fp = r_fp(); 
+    uint64 top = PGROUNDUP(fp); 
+    uint64 bottom = PGROUNDDOWN(fp);   
+    for (; fp >= bottom && fp < top;   fp = *((uint64 *) (fp - 16))) 
+        printf("%p\n", *((uint64 *) (fp - 8)));    
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..2ce4692 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -121,6 +121,11 @@ found:
   p->state = USED;
 
   // Allocate a trapframe page.
+  if((p->trapframeSave = (struct trapframe *)kalloc()) == 0){
+    release(&p->lock);
+    return 0;
+  }
+  
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
     release(&p->lock);
@@ -152,6 +157,10 @@ freeproc(struct proc *p)
 {
   if(p->trapframe)
     kfree((void*)p->trapframe);
+  
+  if(p->trapframeSave)
+  	kfree((void*)p->trapframeSave);
+  
   p->trapframe = 0;
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
diff --git a/kernel/proc.h b/kernel/proc.h
index f6ca8b7..06082e7 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -105,4 +105,9 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  uint64 interval;
+  void(*handler)();
+  uint64 spend;
+  struct trapframe* trapframeSave;
+  int waitReturn;
 };
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 1691faf..8ad54b2 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -364,3 +364,11 @@ sfence_vma()
 
 typedef uint64 pte_t;
 typedef uint64 *pagetable_t; // 512 PTEs
+
+static inline uint64
+r_fp()
+{
+  uint64 x;
+  asm volatile("mv %0, s0" : "=r" (x));
+  return x;
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..a74be20 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_sigalarm(void);
+extern uint64 sys_sigreturn(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +129,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_sigalarm]   sys_sigalarm,
+[SYS_sigreturn]   sys_sigreturn,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..67ca3a4 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_sigalarm 22
+#define SYS_sigreturn 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..c192774 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -70,6 +70,7 @@ sys_sleep(void)
     sleep(&ticks, &tickslock);
   }
   release(&tickslock);
+  backtrace(); 
   return 0;
 }
 
@@ -95,3 +96,27 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_sigalarm(void){
+	struct proc* myProc = myproc();
+	int n;
+	uint64 handler;
+	if(argint(0, &n) < 0)
+		return -1;
+	myProc->interval = n;
+	
+	if(argaddr(1, &handler) < 0)
+		return -1;
+	myProc->handler = (void (*)())handler;
+	
+	return 0;
+}
+
+uint64
+sys_sigreturn(void){
+	struct proc* myProc = myproc();
+	switchTrapframe(myProc->trapframe, myProc->trapframeSave);
+	myProc->waitReturn = 0;
+	return 0;
+}
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..0411278 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -66,6 +66,17 @@ usertrap(void)
 
     syscall();
   } else if((which_dev = devintr()) != 0){
+  	if(which_dev == 2 && p->waitReturn == 0){
+  		if(p->interval != 0){
+  			p->spend = p->spend + 1;
+	  		if(p->spend == p->interval){
+	  			switchTrapframe(p->trapframeSave, p->trapframe);
+	  			p->spend = 0;
+	  			p->trapframe->epc = (uint64)p->handler;
+	  			p->waitReturn = 1;
+			}
+		}
+	}
     // ok
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
@@ -218,3 +229,39 @@ devintr()
   }
 }
 
+void switchTrapframe(struct trapframe* trapframe, struct trapframe *trapframeSave){
+	trapframe->kernel_satp = trapframeSave->kernel_satp;
+	trapframe->kernel_sp = trapframeSave->kernel_sp;
+	trapframe->epc = trapframeSave->epc;
+	trapframe->kernel_hartid = trapframeSave->kernel_hartid;
+	trapframe->ra = trapframeSave->ra;
+	trapframe->sp = trapframeSave->sp;
+	trapframe->gp = trapframeSave->gp;
+	trapframe->tp = trapframeSave->tp;
+	trapframe->t0 = trapframeSave->t0;
+	trapframe->t1 = trapframeSave->t1;
+	trapframe->t2 = trapframeSave->t2;
+	trapframe->s0 = trapframeSave->s0;
+	trapframe->s1 = trapframeSave->s1;
+	trapframe->a0 = trapframeSave->a0;
+	trapframe->a1 = trapframeSave->a1;
+	trapframe->a2 = trapframeSave->a2;
+	trapframe->a3 = trapframeSave->a3;
+	trapframe->a4 = trapframeSave->a4;
+	trapframe->a5 = trapframeSave->a5;
+	trapframe->a6 = trapframeSave->a6;
+	trapframe->a7 = trapframeSave->a7;
+	trapframe->s2 = trapframeSave->s2;
+	trapframe->s3 = trapframeSave->s3;
+	trapframe->s4 = trapframeSave->s4;
+	trapframe->s5 = trapframeSave->s5;
+	trapframe->s6 = trapframeSave->s6;
+	trapframe->s7 = trapframeSave->s7;
+	trapframe->s8 = trapframeSave->s8;
+	trapframe->s9 = trapframeSave->s9;
+	trapframe->s10 = trapframeSave->s10;
+	trapframe->s11 = trapframeSave->s11;
+	trapframe->t4 = trapframeSave->t4;
+	trapframe->t5 = trapframeSave->t5;
+	trapframe->t6 = trapframeSave->t6;
+}
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..86ee83a
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+40
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index b71ecda..d906bde 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int sigalarm(int tinks, void(*handler)());
+int sigreturn(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..fa548b0 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("sigalarm");
+entry("sigreturn");
