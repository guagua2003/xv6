diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..297ed11 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             cow_alloc(pagetable_t, uint64);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -170,6 +171,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+pte_t*          walk(pagetable_t, uint64, int);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..f7d804c 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -9,6 +9,8 @@
 #include "riscv.h"
 #include "defs.h"
 
+uint page_ref[(PHYSTOP - KERNBASE) / PGSIZE];
+
 void freerange(void *pa_start, void *pa_end);
 
 extern char end[]; // first address after kernel.
@@ -46,11 +48,20 @@ freerange(void *pa_start, void *pa_end)
 void
 kfree(void *pa)
 {
-  struct run *r;
+  struct run *r;  
 
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
+  //acquire(&ref_lock);
+  if(page_ref[COW_INDEX(pa)] > 1) {
+    page_ref[COW_INDEX(pa)]--;
+    //release(&ref_lock);
+    return;
+  }
+  page_ref[COW_INDEX(pa)] = 0;
+  //release(&ref_lock);
+
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
 
@@ -76,7 +87,34 @@ kalloc(void)
     kmem.freelist = r->next;
   release(&kmem.lock);
 
-  if(r)
+  if(r) {
     memset((char*)r, 5, PGSIZE); // fill with junk
+    page_ref[COW_INDEX(r)] = 1;
+  }
   return (void*)r;
 }
+
+int
+cow_alloc(pagetable_t pagetable, uint64 va) {
+  va = PGROUNDDOWN(va);
+  if(va >= MAXVA) return -1;
+  pte_t *pte = walk(pagetable, va, 0);
+  if(pte == 0) return -1;
+  uint64 pa = PTE2PA(*pte);
+  if(pa == 0) return -1;
+  uint64 flags = PTE_FLAGS(*pte);
+  if(flags & PTE_COW) {
+    uint64 mem = (uint64)kalloc();
+    if (mem == 0) return -1;
+    memmove((char*)mem, (char*)pa, PGSIZE);
+    uvmunmap(pagetable, va, 1, 1);
+    flags = (flags | PTE_W) & ~PTE_COW;
+    //*pte = PA2PTE(mem) | flags;
+	if (mappages(pagetable, va, PGSIZE, mem, flags) != 0) {
+      kfree((void*)mem);
+      return -1;
+    }
+  }
+  return 0;
+}
+
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 1691faf..008f7dc 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,8 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_COW (1L << 8)
+#define COW_INDEX(pa) (((uint64)(pa) - KERNBASE) >> 12)
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..4329d6e 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,6 +65,12 @@ usertrap(void)
     intr_on();
 
     syscall();
+  } else if(r_scause() == 15) {
+    uint64 va = r_stval();
+    if(va >= p->sz)
+      p->killed = 1;
+    else if(cow_alloc(p->pagetable, va) != 0)
+      p->killed = 1;
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
diff --git a/kernel/vm.c b/kernel/vm.c
index d5a12a0..f4ae543 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -15,6 +15,8 @@ extern char etext[];  // kernel.ld sets this to end of kernel code.
 
 extern char trampoline[]; // trampoline.S
 
+extern uint page_ref[]; // kalloc.c
+
 // Make a direct-map page table for the kernel.
 pagetable_t
 kvmmake(void)
@@ -303,7 +305,7 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  //char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
@@ -311,14 +313,18 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
+    *pte = (*pte & ~PTE_W) | PTE_COW;
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    //if((mem = kalloc()) == 0)
+    //  goto err;
+    //memmove(mem, (char*)pa, PGSIZE);
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      //kfree(mem);
       goto err;
     }
+    //acquire(&ref_lock);
+    page_ref[COW_INDEX(pa)]++;
+    //release(&ref_lock);
   }
   return 0;
 
@@ -347,15 +353,21 @@ int
 copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
   uint64 n, va0, pa0;
+  pte_t *pte;
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+    if (cow_alloc(pagetable, va0) != 0)
+      return -1;
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (dstva - va0);
     if(n > len)
       n = len;
+    pte = walk(pagetable, va0, 0);
+    if(pte == 0)
+      return -1;
     memmove((void *)(pa0 + (dstva - va0)), src, n);
 
     len -= n;
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..86ee83a
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+40
\ No newline at end of file
