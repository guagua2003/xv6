diff --git a/Makefile b/Makefile
index 7a7e380..ac698dc 100644
--- a/Makefile
+++ b/Makefile
@@ -188,6 +188,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_mmaptest\
 
 
 
diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..782ca11 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -145,6 +145,8 @@ void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
 void            usertrapret(void);
+int             isMmap(uint64 addr);
+void            handleMmap(uint64 addr, int index);
 
 // uart.c
 void            uartinit(void);
@@ -170,6 +172,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+pte_t*          walk(pagetable_t pagetable, uint64 va, int alloc);
 
 // plic.c
 void            plicinit(void);
@@ -184,3 +187,5 @@ void            virtio_disk_intr(void);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+uint64          munmap(uint64 addr, uint64 length);
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..4ab32fe 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,10 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "fs.h"
+#include "sleeplock.h"
+#include "file.h"
+#include "fcntl.h"
 
 struct cpu cpus[NCPU];
 
@@ -140,7 +144,17 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
-
+  
+  for(int i = 0; i < MAXMMAP; i++) {
+	p->proc_VMA[i].addr = 0;
+	p->proc_VMA[i].f = 0;
+	p->proc_VMA[i].flags = 0;
+	p->proc_VMA[i].length = 0;
+	p->proc_VMA[i].offset = 0;
+	p->proc_VMA[i].prot = 0;
+	p->proc_VMA[i].used = 0;
+  } 
+  
   return p;
 }
 
@@ -164,6 +178,16 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  
+  for (int i = 0; i < MAXMMAP; i++) {
+	p->proc_VMA[i].addr = 0;
+	p->proc_VMA[i].f = 0;
+	p->proc_VMA[i].flags = 0;
+	p->proc_VMA[i].length = 0;
+	p->proc_VMA[i].offset = 0;
+	p->proc_VMA[i].prot = 0;
+	p->proc_VMA[i].used = 0;
+  }
 }
 
 // Create a user page table for a given process,
@@ -280,7 +304,7 @@ fork(void)
   if((np = allocproc()) == 0){
     return -1;
   }
-
+  
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
@@ -300,6 +324,13 @@ fork(void)
     if(p->ofile[i])
       np->ofile[i] = filedup(p->ofile[i]);
   np->cwd = idup(p->cwd);
+  
+  for(int i = 0; i < MAXMMAP; i++) {	  
+	  if(p->proc_VMA[i].addr){
+	    np->proc_VMA[i] = p->proc_VMA[i];
+	  	filedup(np->proc_VMA[i].f);
+	  }
+  }
 
   safestrcpy(np->name, p->name, sizeof(p->name));
 
@@ -344,6 +375,11 @@ exit(int status)
   if(p == initproc)
     panic("init exiting");
 
+  for(int i = 0; i < MAXMMAP; i++) {
+	  if(p->proc_VMA[i].used)
+	    munmap(p->proc_VMA[i].addr, p->proc_VMA[i].length);
+  }
+
   // Close all open files.
   for(int fd = 0; fd < NOFILE; fd++){
     if(p->ofile[fd]){
@@ -373,6 +409,7 @@ exit(int status)
 
   release(&wait_lock);
 
+
   // Jump into the scheduler, never to return.
   sched();
   panic("zombie exit");
diff --git a/kernel/proc.h b/kernel/proc.h
index f6ca8b7..1ebf6b9 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -82,6 +82,18 @@ struct trapframe {
 
 enum procstate { UNUSED, USED, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+#define MAXMMAP 16
+struct VMA {
+  uint64 addr;
+  uint64 length;
+  int prot;
+  int flags;
+  struct file* f;
+  uint64 offset;
+  int used;
+  struct spinlock lock;
+};
+
 // Per-process state
 struct proc {
   struct spinlock lock;
@@ -105,4 +117,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  struct VMA proc_VMA[MAXMMAP];
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..7320633 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_mmap(void);
+extern uint64 sys_munmap(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +129,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_mmap]    sys_mmap,
+[SYS_munmap]  sys_munmap,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..4e24fd5 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_mmap   22
+#define SYS_munmap  23
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 5dc453b..3983f77 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -484,3 +484,120 @@ sys_pipe(void)
   }
   return 0;
 }
+
+uint64 
+sys_mmap(void) 
+{
+  uint64 addr, length, offset;
+  int prot, flags, fd, i;
+  struct proc *p = myproc();
+  struct file *f;
+  if(argaddr(0, &addr) < 0 || argaddr(1, &length) < 0 || argaddr(5, &offset) < 0)
+    return -1;
+
+  if(argint(2, &prot) < 0 || argint(3, &flags) < 0 || argint(4, &fd) < 0)
+    return -1;
+
+  if(addr != 0)
+    panic("sys_mmap: addr just can be 0 in my mmap");
+
+
+  acquire(&p->lock);
+  
+  if(flags & MAP_SHARED) {
+    if(p->ofile[fd]->readable == 0 && (prot & PROT_READ)) {
+      release(&p->lock);
+      return -1;
+    }
+    if(p->ofile[fd]->writable == 0 && (prot & PROT_WRITE)) {
+      release(&p->lock);
+      return -1;
+    }
+  }
+
+  addr = p->sz;
+  p->sz += length;
+  f = filedup(p->ofile[fd]);
+
+  for(i = 0; i < MAXMMAP; i++) {
+    if(p->proc_VMA[i].used == 0) {
+      p->proc_VMA[i].addr = addr;
+      p->proc_VMA[i].f = f;
+      p->proc_VMA[i].flags = flags;
+      p->proc_VMA[i].length = length;
+      p->proc_VMA[i].offset = offset;
+      p->proc_VMA[i].prot = prot;
+      p->proc_VMA[i].used = 1;
+      break;
+    }
+  }
+  if(i == MAXMMAP)
+    panic("no free VMA for mmap");
+
+  release(&p->lock);
+  return addr;
+}
+
+uint64 
+munmap(uint64 addr, uint64 length) 
+{
+  struct proc *p = myproc();
+  int i;
+  uint64 begin = 0, end = 0;
+
+  for(i = 0; i < MAXMMAP; i++) {
+    if(p->proc_VMA[i].used) {
+      begin = p->proc_VMA[i].addr;
+      end = p->proc_VMA[i].addr + p->proc_VMA[i].length;
+      if(addr >= begin && addr < end)
+        break;
+    }
+  }
+  if (addr < begin || addr >= end)
+    panic("sys_munmap: addr not mmap");
+
+  if(p->proc_VMA[i].flags & MAP_SHARED) {
+    for(uint64 index = PGROUNDDOWN(addr); index != PGROUNDUP(addr + length); index += PGSIZE) {
+      pte_t *pte = walk(p->pagetable, index, 0);
+
+      if(pte == 0 || (*pte & PTE_V) == 0)
+        continue;
+        
+      begin_op();
+      if(writei(p->proc_VMA[i].f->ip, 1, index, p->proc_VMA[i].offset + (index - addr), PGSIZE) < 0)
+        panic("sys_munmap: write");
+
+      end_op();
+    } 
+  }
+
+  uvmunmap(p->pagetable, PGROUNDDOWN(addr), (PGROUNDUP(addr + length) - PGROUNDDOWN(addr)) / PGSIZE, 1);
+
+  if(addr == begin) {
+    if(addr + length == end) { 
+      p->proc_VMA[i].used = 0;
+      struct file *f = p->proc_VMA[i].f;
+      fileclose(f);
+      return 0;
+    } else { 
+      p->proc_VMA[i].addr = addr + length;
+      p->proc_VMA[i].length -= length;
+      p->proc_VMA[i].offset += length;
+    }
+  } else 
+    p->proc_VMA[i].length -= length;
+
+  return 0;
+}
+
+uint64 
+sys_munmap(void) 
+{
+  uint64 addr;
+  uint64 length;
+  if(argaddr(0, &addr) < 0 || argaddr(1, &length) < 0)
+    return -1;
+
+  return munmap(addr, length);
+}
+
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..c7b5d68 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -5,6 +5,10 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "fs.h"
+#include "sleeplock.h"
+#include "file.h"
+#include "fcntl.h"
 
 struct spinlock tickslock;
 uint ticks;
@@ -29,10 +33,60 @@ trapinithart(void)
   w_stvec((uint64)kernelvec);
 }
 
-//
-// handle an interrupt, exception, or system call from user space.
-// called from trampoline.S
-//
+int 
+isMmap(uint64 addr) 
+{
+  struct proc *p = myproc();
+  uint64 begin, end;
+
+  for(int i = 0; i < MAXMMAP; i++) {
+    if(p->proc_VMA[i].used) {
+      begin = p->proc_VMA[i].addr;
+      end = p->proc_VMA[i].addr + p->proc_VMA[i].length;
+      if(p->proc_VMA[i].used == 1 && (addr >=  begin && addr < end))
+        return i;        
+    }
+  }
+  return -1;
+}
+
+void 
+handleMmap(uint64 addr, int index) 
+{
+  struct proc *p = myproc();
+  uint64 pa = (uint64)kalloc();
+  int perm = 0, prot, off;
+  struct inode *ip;
+  if(pa == 0)
+    panic("handleMmap: no pa");
+  else {
+    memset((void*)pa, 0, PGSIZE);
+
+    ip = p->proc_VMA[index].f->ip;
+    off = p->proc_VMA[index].offset + (PGROUNDDOWN(addr) - p->proc_VMA[index].addr);
+    ilock(ip);
+    begin_op();
+    readi(ip, 0, pa, off, PGSIZE);
+    end_op();
+    iunlock(ip);
+
+    prot = p->proc_VMA[index].prot;
+    if(prot & PROT_READ)
+      perm |= PTE_R;
+
+    if(prot & PROT_WRITE)
+      perm |= PTE_W;
+
+    if(prot & PROT_EXEC)
+      perm |= PTE_X;
+
+    perm |= PTE_U;
+
+    if((mappages(p->pagetable, PGROUNDDOWN(addr), PGSIZE, pa, perm)) < 0)
+      panic("handleMmap: mappages f");
+  }
+}
+
 void
 usertrap(void)
 {
@@ -65,6 +119,17 @@ usertrap(void)
     intr_on();
 
     syscall();
+  } else if(r_scause() == 13 || r_scause() == 15) {
+	  int index;
+
+	  if((index = isMmap(r_stval())) >= 0) { 
+	    handleMmap(r_stval(), index);
+	  } else { 
+	    printf("is no mmap\n");
+	    printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
+	    printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+	    p->killed = 1;
+	  }
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
diff --git a/kernel/vm.c b/kernel/vm.c
index d5a12a0..24a1e7e 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -110,10 +110,15 @@ walkaddr(pagetable_t pagetable, uint64 va)
     return 0;
 
   pte = walk(pagetable, va, 0);
-  if(pte == 0)
-    return 0;
-  if((*pte & PTE_V) == 0)
-    return 0;
+  if(pte == 0 || (*pte & PTE_V) == 0) {
+	  int index;
+	  if((index = isMmap(va)) >= 0) {
+	    handleMmap(va, index);
+	  } else {
+	    return 0;
+	  }
+  }
+
   if((*pte & PTE_U) == 0)
     return 0;
   pa = PTE2PA(*pte);
@@ -173,9 +178,9 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
 
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
     if((pte = walk(pagetable, a, 0)) == 0)
-      panic("uvmunmap: walk");
+      continue;
     if((*pte & PTE_V) == 0)
-      panic("uvmunmap: not mapped");
+      continue;
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
     if(do_free){
@@ -307,9 +312,9 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
-      panic("uvmcopy: pte should exist");
+      continue;
     if((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
+      continue;
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..86ee83a
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+40
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index b71ecda..4dee9a3 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+char* mmap(void* addr, int length, int prot, int flags, int fd, int offset);
+int munmap(void* addr, int length);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d23b9cc 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("mmap");
+entry("munmap");
