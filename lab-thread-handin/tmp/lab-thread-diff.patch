diff --git a/answers-thread.txt b/answers-thread.txt
new file mode 100644
index 0000000..07bd9b8
--- /dev/null
+++ b/answers-thread.txt
@@ -0,0 +1,18 @@
+思考：为什么缺少2个线程的键，而没有1个线程的密钥？标识 具有 2 个线程的可能导致密钥丢失的事件。
+
+**在给定的情景中，使用两个线程时出现了缺失的键值，而使用一个线程时却没有出现这个问题。这个问题很可能与并发访问哈希表时的竞态条件有关，即多个线程同时尝试修改哈希表的情况。下面是两个线程出现键值缺失的可能事件序列：**
+
+1. **线程 T1 和 T2 同时开始运行。**
+2. **T1 读取哈希表以确定某个键（我们称其为 Key1）是否存在。**
+3. **在 T1 能够将 Key1 插入哈希表之前，调度器切换到了 T2。**
+4. **T2 也读取哈希表，检查 Key1 是否存在。**
+5. **T2 在哈希表中没有找到 Key1，因为 T1 尚未插入它。**
+6. **T2 将 Key1 插入哈希表。**
+7. **现在，哈希表中有 Key1，但 T1 还不知道。**
+8. **调度器切换回 T1。**
+9. **T1 尝试将 Key1 插入哈希表，不知道 T2 已经插入过了。**
+10. **结果，哈希表中出现了 Key1 的重复，导致了缺失键值的问题。**
+
+**这个事件序列是由于两个线程并发地访问哈希表所导致的典型竞态条件。这种情况下，当多个线程同时尝试读取和修改哈希表时，可能导致不同线程的操作产生不一致的结果，进而导致键值缺失问题。**
+
+**为了解决这个问题，需要在 `put()` 和 `insert()` 函数中实现适当的同步机制，以确保对哈希表的访问是原子的且线程之间一致的。通过确保同一时间只有一个线程可以读取或修改哈希表，就可以解决键值缺失问题，并在获得正确的并行加速时保持数据的一致性。**
\ No newline at end of file
diff --git a/notxv6/barrier.c b/notxv6/barrier.c
index 12793e8..77ecdf3 100644
--- a/notxv6/barrier.c
+++ b/notxv6/barrier.c
@@ -30,7 +30,15 @@ barrier()
   // Block until all threads have called barrier() and
   // then increment bstate.round.
   //
-  
+  pthread_mutex_lock(&bstate.barrier_mutex);
+  if(++bstate.nthread != nthread)  {    
+    pthread_cond_wait(&bstate.barrier_cond,&bstate.barrier_mutex);
+  } else {
+    bstate.nthread = 0;
+    ++bstate.round;
+    pthread_cond_broadcast(&bstate.barrier_cond);
+  }
+  pthread_mutex_unlock(&bstate.barrier_mutex);
 }
 
 static void *
diff --git a/notxv6/ph.c b/notxv6/ph.c
index 82afe76..2142d6c 100644
--- a/notxv6/ph.c
+++ b/notxv6/ph.c
@@ -36,9 +36,11 @@ insert(int key, int value, struct entry **p, struct entry *n)
   *p = e;
 }
 
+pthread_mutex_t locks[NBUCKET];
+
 static 
 void put(int key, int value)
-{
+{	
   int i = key % NBUCKET;
 
   // is the key already present?
@@ -47,6 +49,9 @@ void put(int key, int value)
     if (e->key == key)
       break;
   }
+  
+  pthread_mutex_lock(locks + i);
+  
   if(e){
     // update the existing key.
     e->value = value;
@@ -54,7 +59,8 @@ void put(int key, int value)
     // the new is new.
     insert(key, value, &table[i], table[i]);
   }
-
+	
+  pthread_mutex_unlock(locks + i);
 }
 
 static struct entry*
@@ -101,6 +107,9 @@ get_thread(void *xa)
 int
 main(int argc, char *argv[])
 {
+  for (int i = 0; i < NBUCKET; i++)
+	pthread_mutex_init(locks + i, NULL);
+  
   pthread_t *tha;
   void *value;
   double t1, t0;
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..86ee83a
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+40
\ No newline at end of file
diff --git a/user/uthread.c b/user/uthread.c
index 06349f5..0daa8e2 100644
--- a/user/uthread.c
+++ b/user/uthread.c
@@ -10,10 +10,27 @@
 #define STACK_SIZE  8192
 #define MAX_THREAD  4
 
+struct threadcontext {
+	uint64 ra;
+	uint64 sp;
+	uint64 s0;
+	uint64 s1;
+	uint64 s2;
+	uint64 s3;
+	uint64 s4;
+	uint64 s5;
+	uint64 s6;
+	uint64 s7;
+	uint64 s8;
+	uint64 s9;
+	uint64 s10;
+	uint64 s11;
+};
 
 struct thread {
   char       stack[STACK_SIZE]; /* the thread's stack */
   int        state;             /* FREE, RUNNING, RUNNABLE */
+  struct threadcontext context;
 };
 struct thread all_thread[MAX_THREAD];
 struct thread *current_thread;
@@ -62,6 +79,10 @@ thread_schedule(void)
      * Invoke thread_switch to switch from t to next_thread:
      * thread_switch(??, ??);
      */
+     thread_switch(
+        (uint64)&t->context, 
+        (uint64)&next_thread->context
+    );
   } else
     next_thread = 0;
 }
@@ -76,6 +97,8 @@ thread_create(void (*func)())
   }
   t->state = RUNNABLE;
   // YOUR CODE HERE
+  t->context.ra = (uint64)func;
+  t->context.sp = (uint64)&t->stack[STACK_SIZE-1];
 }
 
 void 
diff --git a/user/uthread_switch.S b/user/uthread_switch.S
index 5defb12..e40ea0f 100644
--- a/user/uthread_switch.S
+++ b/user/uthread_switch.S
@@ -1,11 +1,43 @@
 	.text
 
-	/*
+	/*   void 
+	     thread_switch(struct threadcontext *old, struct threadcontext *new);
+
          * save the old thread's registers,
          * restore the new thread's registers.
          */
 
 	.globl thread_switch
 thread_switch:
-	/* YOUR CODE HERE */
+	sd ra, 0(a0)
+	sd sp, 8(a0)
+	sd s0, 16(a0)
+	sd s1, 24(a0)
+	sd s2, 32(a0)
+	sd s3, 40(a0)
+	sd s4, 48(a0)
+	sd s5, 56(a0)
+	sd s6, 64(a0)
+	sd s7, 72(a0)
+	sd s8, 80(a0)
+	sd s9, 88(a0)
+	sd s10, 96(a0)
+	sd s11, 104(a0)
+
+	ld ra, 0(a1)
+	ld sp, 8(a1)
+	ld s0, 16(a1)
+	ld s1, 24(a1)
+	ld s2, 32(a1)
+	ld s3, 40(a1)
+	ld s4, 48(a1)
+	ld s5, 56(a1)
+	ld s6, 64(a1)
+	ld s7, 72(a1)
+	ld s8, 80(a1)
+	ld s9, 88(a1)
+	ld s10, 96(a1)
+	ld s11, 104(a1)
+
 	ret    /* return to ra */
+
