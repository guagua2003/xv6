diff --git a/kernel/e1000.c b/kernel/e1000.c
index 70a2adf..6d8e938 100644
--- a/kernel/e1000.c
+++ b/kernel/e1000.c
@@ -102,7 +102,20 @@ e1000_transmit(struct mbuf *m)
   // the TX descriptor ring so that the e1000 sends it. Stash
   // a pointer so that it can be freed after sending.
   //
-  
+  acquire(&e1000_lock);
+  uint index = regs[E1000_TDT];
+  if((tx_ring[index].status & E1000_TXD_STAT_DD) == 0){
+    release(&e1000_lock);
+    return -1;
+  }
+  if(tx_mbufs[index])
+    mbuffree(tx_mbufs[index]);
+  tx_mbufs[index] = m;
+  tx_ring[index].length = m->len;
+  tx_ring[index].addr = (uint64)m->head;
+  tx_ring[index].cmd = E1000_TXD_CMD_RS | E1000_TXD_CMD_EOP;
+  regs[E1000_TDT] = (index + 1) % TX_RING_SIZE;
+  release(&e1000_lock);
   return 0;
 }
 
@@ -115,6 +128,20 @@ e1000_recv(void)
   // Check for packets that have arrived from the e1000
   // Create and deliver an mbuf for each packet (using net_rx()).
   //
+  uint index = regs[E1000_RDT];
+  index = (index + 1) % RX_RING_SIZE;
+  while(rx_ring[index].status & E1000_RXD_STAT_DD) {
+    rx_mbufs[index]->len = rx_ring[index].length;
+    net_rx(rx_mbufs[index]);
+    if((rx_mbufs[index] = mbufalloc(0)) == 0)
+      panic("e1000");
+    rx_ring[index].addr = (uint64)rx_mbufs[index]->head;
+    rx_ring[index].status = 0;
+    index = (index + 1) % RX_RING_SIZE;
+  }
+  if(index == 0)
+    index = RX_RING_SIZE;
+  regs[E1000_RDT] = (index - 1) % RX_RING_SIZE;
 }
 
 void
diff --git a/packets.pcap b/packets.pcap
index 82d353e..a6aeee7 100644
Binary files a/packets.pcap and b/packets.pcap differ
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..86ee83a
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+40
\ No newline at end of file
