diff --git a/Makefile b/Makefile
index c926b7e..8de5e0e 100644
--- a/Makefile
+++ b/Makefile
@@ -193,6 +193,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_sysinfotest\
+	$U/_sysinfo\
 
 
 
diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..44ce129 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             freemem_size(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -104,6 +105,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             proc_num(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..c73d948 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,13 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+int
+freemem_size(void){
+	struct run *r;
+	int k = 0;
+	for(r = kmem.freelist; r; r = r->next)
+		k++;
+		
+	return k * PGSIZE;
+} 
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..1400e63 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -288,6 +288,8 @@ fork(void)
     return -1;
   }
   np->sz = p->sz;
+  
+  safestrcpy(np->mask, p->mask, sizeof(p->mask));
 
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
@@ -654,3 +656,14 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+proc_num(void){
+	struct proc *p;
+	uint64 num = 0;
+	for(p = proc; p < &proc[NPROC]; p++){
+		if(p->state != UNUSED)
+			num++;
+	}
+	return num;
+} 
diff --git a/kernel/proc.h b/kernel/proc.h
index f6ca8b7..9cf76c0 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -105,4 +105,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  char mask[24];
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..4dd8549 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,8 +129,12 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo]   sys_sysinfo,
 };
 
+static char *syscall_names[24] = {"", "fork", "exit", "wait", "pipe", "read", "kill", "exec", "fstat", "chdir", "dup", "getpid", "sbrk", "sleep", "uptime", "open", "write", "mknod", "unlink", "link", "mkdir", "close", "trace", "sysinfo"};
+
 void
 syscall(void)
 {
@@ -138,6 +144,9 @@ syscall(void)
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     p->trapframe->a0 = syscalls[num]();
+    
+    if(strlen(p->mask) > 0 && p->mask[num] == '1')
+    	printf("%d: syscall %s -> %d\n", p->pid, syscall_names[num], p->trapframe->a0);
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..7961890 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_sysinfo  23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..d368349 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "sysinfo.h"
 
 uint64
 sys_exit(void)
@@ -95,3 +96,43 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int k;
+  if(argint(0, &k) < 0)
+  	return -1;
+	
+  struct proc *p = myproc();
+  char *mask = p->mask;
+  
+  int i = 0;
+  while(i < 23 && k > 0){
+  	if(k % 2)
+  		mask[i++] = '1';
+  	else
+  		mask[i++] = '0';
+  	
+  	k >>= 1;
+  }
+  
+  return 0;
+}
+
+uint64
+sys_sysinfo(void){
+	struct sysinfo info;
+	uint64 address;
+	struct proc *p = myproc();
+	
+	if(argaddr(0, &address) < 0)
+		return -1;
+	
+	info.freemem = freemem_size();
+	info.nproc = proc_num();
+	if(copyout(p->pagetable, address, (char *)&info, sizeof(info)) < 0)
+		return -1;
+	
+	return 0;
+}
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..86ee83a
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+40
\ No newline at end of file
diff --git a/user/sysinfo.c b/user/sysinfo.c
new file mode 100644
index 0000000..2d92e02
--- /dev/null
+++ b/user/sysinfo.c
@@ -0,0 +1,20 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/sysinfo.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+    if (argc != 1)
+    {
+        fprintf(2, "Usage: %s need not param\n", argv[0]);
+        exit(1);
+    }
+
+    struct sysinfo info;
+    sysinfo(&info);
+    printf("free space: %d\nused process: %d\n", info.freemem, info.nproc);
+    exit(0);
+}
+
diff --git a/user/user.h b/user/user.h
index b71ecda..6ba24e6 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct sysinfo;
 
 // system calls
 int fork(void);
@@ -23,6 +24,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int sysinfo(struct sysinfo*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..bc109fd 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
