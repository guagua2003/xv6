diff --git a/Makefile b/Makefile
index c926b7e..e966fdf 100644
--- a/Makefile
+++ b/Makefile
@@ -193,6 +193,12 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_sleep\
+	$U/_pingpong\
+	$U/_primes\
+	$U/_find\
+	$U/_xargs\
+
 
 
 
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..86ee83a
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+40
\ No newline at end of file
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..7c09d12
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,82 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+
+char* fmtname(char *path)
+{
+  static char buf[DIRSIZ+1];
+  char *p;
+
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+    ;
+  p++;
+
+  if(strlen(p) >= DIRSIZ)
+    return p;
+  memmove(buf, p, strlen(p));
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  return buf;
+}
+
+void find_files(char *path, char *filename) {
+  char buf[512], *p;
+  int fd;
+  struct dirent de;
+  struct stat st;
+
+  if ((fd = open(path, 0)) < 0) {
+    fprintf(2, "find: cannot open %s\n", path);
+    return;
+  }
+
+  if (fstat(fd, &st) < 0) {
+    fprintf(2, "find: cannot stat %s\n", path);
+    close(fd);
+    return;
+  }
+
+  switch (st.type) {
+    case T_FILE:
+      if (strcmp(fmtname(path), filename) == 0)
+        printf("%s\n", path);
+      break;
+
+    case T_DIR:
+      if (strlen(path) + 1 + DIRSIZ + 1 > sizeof(buf)) {
+        printf("find: path too long\n");
+        break;
+      }
+      strcpy(buf, path);
+      p = buf + strlen(buf);
+      *p++ = '/';
+      while (read(fd, &de, sizeof(de)) == sizeof(de)) {
+        if (de.inum == 0)
+          continue;
+        memmove(p, de.name, DIRSIZ);
+        p[DIRSIZ] = 0;
+        if (stat(buf, &st) < 0) {
+          printf("find: cannot stat %s\n", buf);
+          continue;
+        }
+        if (st.type == T_DIR && strcmp(de.name, ".") != 0 && strcmp(de.name, "..") != 0)
+          find_files(buf, filename);
+        else if (st.type == T_FILE && strcmp(de.name, filename) == 0)
+          printf("%s/%s\n", path, filename);
+      }
+      break;
+  }
+  close(fd);
+}
+
+int main(int argc, char *argv[]) {
+  if (argc != 3) {
+    fprintf(2, "Usage: find <directory> <filename>\n");
+    exit(1);
+  }
+
+  find_files(argv[1], argv[2]);
+
+  exit(0);
+}
+
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..435d5ca
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,48 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main() {
+    int parentToChild[2], childToParent[2]; 
+    char byte; 
+
+    if (pipe(parentToChild) < 0 || pipe(childToParent) < 0) {
+        printf("pipe error\n");
+        exit(1);
+    }
+
+    int pid = fork();
+    if (pid < 0) {
+        printf("fork error\n");
+        exit(1);
+    } 
+	else if (pid == 0) {
+        close(parentToChild[1]);
+        close(childToParent[0]);
+
+        read(parentToChild[0], &byte, sizeof(byte));
+		printf("%d: received ping\n", getpid());
+
+        write(childToParent[1], &byte, sizeof(byte));
+
+        close(parentToChild[0]);
+        close(childToParent[1]);
+    } 
+	else {
+        close(parentToChild[0]);
+        close(childToParent[1]);
+
+		byte = 'A';
+        write(parentToChild[1], &byte, sizeof(byte));
+        wait(&pid);
+
+        read(childToParent[0], &byte, sizeof(byte));
+        printf("%d: received pong\n", getpid());
+
+        close(parentToChild[1]);
+        close(childToParent[0]);        
+    }
+    
+    exit(0);
+}
+
diff --git a/user/primes.c b/user/primes.c
new file mode 100644
index 0000000..db8ab77
--- /dev/null
+++ b/user/primes.c
@@ -0,0 +1,65 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+#define MAX_NUM 34
+
+void process_prime(int a[], int num) {
+    if (num == 1) {
+        printf("prime %d\n", a[0]);
+        return;
+    }
+
+    int p[2];
+    int i;
+    int prime = a[0];
+    int temp;
+
+    printf("prime %d\n", prime);
+
+    pipe(p);
+
+    if (fork() == 0) {
+        for (i = 0; i < num; i++)
+            write(p[1], (char *)(&a[i]), sizeof(a[i]));
+            
+        exit(0);
+    }
+
+    close(p[1]);
+
+    if (fork() == 0) {
+        int count = 0;
+        char buffer[sizeof(int)];
+
+        while (read(p[0], buffer, sizeof(buffer)) != 0) {
+            temp = *((int *)buffer);
+
+            if (temp % prime != 0) {
+                a[count] = temp;
+                count++;
+            }
+        }
+
+        process_prime(a, count);
+
+        exit(0);
+    }
+
+    wait(0);
+    wait(0);
+
+    close(p[0]);
+}
+
+int main() {
+    int a[MAX_NUM];
+    
+    for (int i = 0; i < MAX_NUM; i++)
+        a[i] = i + 2;
+
+    process_prime(a, MAX_NUM);
+
+    exit(0);
+}
+
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..5224967
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,16 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[])
+{
+  if(argc != 2){
+  	printf("the user forgets to pass an argument\n");
+  	exit(1);
+  } 
+  
+  int ticks = atoi(argv[1]);
+  sleep(ticks);
+  
+  exit(0);
+}
diff --git a/user/xargs.c b/user/xargs.c
new file mode 100644
index 0000000..2bec016
--- /dev/null
+++ b/user/xargs.c
@@ -0,0 +1,46 @@
+#include "kernel/types.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[]) {
+    int j = 0;
+    int k;
+    int m = 0;
+    char block[32];
+    char buf[32];
+    char *p = buf;
+    char *lineSplit[32];
+
+    for (int i = 1; i < argc; i++)
+        lineSplit[j++] = argv[i];
+
+    while ((k = read(0, block, sizeof(block))) > 0) {
+        for (int l = 0; l < k; l++) {
+            if (block[l] == '\n') {
+                buf[m] = '\0';
+                m = 0;
+                lineSplit[j++] = p;
+                p = buf;
+                lineSplit[j] = 0;
+                j = argc - 1;
+
+                if (fork() == 0) {
+                    exec(argv[1], lineSplit);
+                    fprintf(2, "xargs: exec failed\n");
+                    exit(1);
+                }
+
+                wait(0);
+            } 
+			else if (block[l] == ' ') {
+                buf[m++] = '\0';
+                lineSplit[j++] = p;
+                p = &buf[m];
+            } 
+			else
+                buf[m++] = block[l];
+        }
+    }
+
+    exit(0);
+}
+
